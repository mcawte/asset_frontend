{"version":3,"sources":["Map.tsx","App.tsx","index.tsx"],"names":["client","W3CWebSocket","Map","onopen","console","log","useState","latitude","longitude","zoom","bearing","pitch","viewport","setViewport","assets","setAssets","id","lat","lng","newAsset","setNewAsset","toolTip","setToolTip","beginsWithFloat","val","parsed_val","parseFloat","isNaN","useEffect","onmessage","message","result","JSON","parse","String","data","document","title","length","checkin","find","asset","TextField","label","type","required","value","onChange","e","target","Button","color","onClick","stringify","readyState","OPEN","send","style","borderRadius","backgroundColor","padding","fontSize","width","height","mapStyle","onViewportChange","nextViewport","mapboxApiAccessToken","map","item","offsetLeft","offsetTop","size","role","aria-label","onMouseEnter","onMouseLeave","datetime","distance","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"4RAMMA,EAAS,I,MAAIC,cAAa,uBAgBnBC,EAAoB,WAC/BF,EAAOG,OAAS,WACdC,QAAQC,IAAI,+BAFuB,MAMLC,mBAAS,CACvCC,SAAU,KACVC,UAAW,MACXC,KAAM,EACNC,QAAS,EACTC,MAAO,IAX4B,mBAM9BC,EAN8B,KAMpBC,EANoB,OAeTP,mBAAS,IAfA,mBAe9BQ,EAf8B,KAetBC,EAfsB,OAgBLT,mBAAS,CACvCU,GAAI,GACJC,IAAK,GACLC,IAAK,KAnB8B,mBAgB9BC,EAhB8B,KAgBpBC,EAhBoB,OAuBPd,mBAC5B,wCAxBmC,mBAuB9Be,EAvB8B,KAuBrBC,EAvBqB,KAuCrC,SAASC,EAAgBC,GACvB,IAAIC,EAAaC,WAAWF,GAC5B,OAAQG,MAAMF,GAZhBG,qBAAU,WACR5B,EAAO6B,UAAY,SAACC,GAClB,IAAIC,EAASC,KAAKC,MAAMC,OAAOJ,EAAQK,OACvCC,SAASC,MAAT,mBAA6BN,EAAOO,OAApC,WACAvB,EAAUgB,MAGX,IA2BH,IAAIQ,EAAoBzB,EAAO0B,MAC7B,SAACC,GAAD,OAAqBA,EAAMzB,KAAOK,KAGpC,OACE,oCACE,kBAACqB,EAAA,EAAD,CACE1B,GAAG,KACH2B,MAAM,KACNC,KAAK,SACLC,UAAU,EACVC,MAAO3B,EAASH,GAChB+B,SAAU,SAACC,GACT5B,EAAY,eAAKD,EAAN,CAAgBH,GAAIgC,EAAEC,OAAOH,YAG5C,kBAACJ,EAAA,EAAD,CACE1B,GAAG,MACH2B,MAAM,MACNC,KAAK,SACLC,UAAU,EACVC,MAAO3B,EAASF,IAChB8B,SAAU,SAACC,GACT5B,EAAY,eAAKD,EAAN,CAAgBF,IAAK+B,EAAEC,OAAOH,YAG7C,kBAACJ,EAAA,EAAD,CACE1B,GAAG,MACH2B,MAAM,MACNC,KAAK,SACLC,UAAU,EACVC,MAAO3B,EAASD,IAChB6B,SAAU,SAACC,GACT5B,EAAY,eAAKD,EAAN,CAAgBD,IAAK8B,EAAEC,OAAOH,YAG7C,kBAACI,EAAA,EAAD,CAAQC,MAAM,UAAUC,QArD5B,WACEhD,QAAQC,IAAI2B,KAAKqB,UAAUlC,IAET,KAAhBA,EAASH,IACTO,EAAgBJ,EAASF,MACzBM,EAAgBJ,EAASD,OAEzBd,QAAQC,IAAI,2BACRL,EAAOsD,aAAetD,EAAOuD,OAC/BvD,EAAOwD,KAAKxB,KAAKqB,UAAUlC,KA4CuBsC,MAAO,CACzDC,aAAc,GACdC,gBAAiB,UACjBC,QAAS,WACTC,SAAU,SAJZ,aAQA,kBAAC,IAAD,iBACMjD,EADN,CAEEkD,MAAM,OACNC,OAAO,OACPC,SAAS,oCACTC,iBAAkB,SAACC,GAAD,OAAkBrD,EAAYqD,IAChDC,qBA7HN,6FA+HOrD,EAAOsD,KAAI,SAACC,GAAD,OACV,kBAAC,IAAD,CACE9D,SAAUmB,WAAW2C,EAAKpD,KAC1BT,UAAWkB,WAAW2C,EAAKnD,KAC3BoD,WAAY,EACZC,UAAW,GAEX,kBAACrB,EAAA,EAAD,CAAQC,MAAM,UAAUqB,KAAK,SAC3B,0BACEC,KAAK,MACLC,aAAW,SACXC,aAAc,kBAAMrD,EAAW+C,EAAKrD,KACpC4D,aAAc,kBACZtD,EAAW,0CALf,gBAUC+C,EAAKrD,QAKC,yCAAZK,GACC,oCACE,oDAA0BkB,EAASsC,UACnC,uEAC0CtC,EAASuC,SADnD,W,MCpJGC,MAVf,WACE,OACE,oCACE,+GAEA,kBAAC,EAAD,QCHNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9C,SAAS+C,eAAe,W","file":"static/js/main.b15d1dcb.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport MapGL, { Marker } from \"react-map-gl\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\n\n// Create a websocket client\nconst client = new W3CWebSocket(\"ws://127.0.0.1:8000\");\n\n// This token will need to be replaced when traffic limit is exceeded\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1IjoibWNhd3RlIiwiYSI6ImNrZzM0am5tZjA3N2IycWxuc2Iyc25mb3oifQ.OBCOBXj9W2BEcsJurgRCVw\"; // Set your mapbox token here\n\ninterface MapProps {\n  id: string;\n  timestamp_utc: string;\n  lng: string;\n  lat: string;\n  timezone: string[];\n  datetime: string;\n  distance: string;\n}\n\nexport const Map: React.FC<{}> = () => {\n  client.onopen = () => {\n    console.log(\"WebSocket Client Connected\");\n  };\n\n  // Initial parameters for map\n  const [viewport, setViewport] = useState({\n    latitude: 16.8,\n    longitude: 100.4,\n    zoom: 1,\n    bearing: 0,\n    pitch: 0,\n  });\n\n  // state getters and setters for assets\n  const [assets, setAssets] = useState([]);\n  const [newAsset, setNewAsset] = useState({\n    id: \"\",\n    lat: \"\",\n    lng: \"\",\n  });\n\n  // Using a randomly generated uuid for initial state. Not for production\n  const [toolTip, setToolTip] = useState(\n    \"aa24f332-28e2-435e-ae9b-a1b164e47ada\"\n  );\n\n  // This effect re-renders all the assets on the map when the server sends new\n  // assets via websockets\n  useEffect(() => {\n    client.onmessage = (message) => {\n      var result = JSON.parse(String(message.data));\n      document.title = `Tracking ${result.length} assets`;\n      setAssets(result);\n    };\n    //return () => client.close();\n  }, []);\n\n  // Convenience function in lieu of proper validation\n  function beginsWithFloat(val: string) {\n    var parsed_val = parseFloat(val);\n    return !isNaN(parsed_val);\n  }\n\n  // Send the new asset to the server via websockets.\n  // Checks to make sure id is not null and lat and lng are floats\n  function sendAssetToServer() {\n    console.log(JSON.stringify(newAsset));\n    if (\n      newAsset.id !== \"\" &&\n      beginsWithFloat(newAsset.lat) &&\n      beginsWithFloat(newAsset.lng)\n    ) {\n      console.log(\"Sending asset to server\");\n      if (client.readyState === client.OPEN) {\n        client.send(JSON.stringify(newAsset));\n        return;\n      }\n    }\n  }\n\n  // This obtains the asset that currently has the mouse over it. Does not\n  // currently account for assets with the same id but different check-in times\n  var checkin: MapProps = assets.find(\n    (asset: MapProps) => asset.id === toolTip\n  )!;\n\n  return (\n    <>\n      <TextField\n        id=\"id\"\n        label=\"id\"\n        type=\"string\"\n        required={true}\n        value={newAsset.id}\n        onChange={(e) => {\n          setNewAsset({ ...newAsset, id: e.target.value });\n        }}\n      />\n      <TextField\n        id=\"lat\"\n        label=\"lat\"\n        type=\"number\"\n        required={true}\n        value={newAsset.lat}\n        onChange={(e) => {\n          setNewAsset({ ...newAsset, lat: e.target.value });\n        }}\n      />\n      <TextField\n        id=\"lng\"\n        label=\"lng\"\n        type=\"number\"\n        required={true}\n        value={newAsset.lng}\n        onChange={(e) => {\n          setNewAsset({ ...newAsset, lng: e.target.value });\n        }}\n      />\n      <Button color=\"primary\" onClick={sendAssetToServer} style={{\n        borderRadius: 25,\n        backgroundColor: \"#21b6ae\",\n        padding: \"8px 16px\",\n        fontSize: \"12px\"\n    }}>\n        Add Asset\n      </Button>\n      <MapGL\n        {...viewport}\n        width=\"70vw\"\n        height=\"95vh\"\n        mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n        onViewportChange={(nextViewport) => setViewport(nextViewport)}\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n      >\n        {assets.map((item: MapProps) => (\n          <Marker\n            latitude={parseFloat(item.lat)}\n            longitude={parseFloat(item.lng)}\n            offsetLeft={0}\n            offsetTop={0}\n          >\n            <Button color=\"primary\" size=\"small\">\n              <span\n                role=\"img\"\n                aria-label=\"marker\"\n                onMouseEnter={() => setToolTip(item.id)}\n                onMouseLeave={() =>\n                  setToolTip(\"aa24f332-28e2-435e-ae9b-a1b164e47ada\")\n                }\n              >\n                üìç\n              </span>\n              {item.id}\n            </Button>\n          </Marker>\n        ))}\n\n        {toolTip !== \"aa24f332-28e2-435e-ae9b-a1b164e47ada\" && (\n          <>\n            <div>Asset checked in at {checkin!.datetime}</div>\n            <div>\n              Distance traveled since last check-in: {checkin!.distance} km\n            </div>\n          </>\n        )}\n      </MapGL>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Map } from \"./Map\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <div>Real time asset tracking with WebSockets. Must connnect to ws://127.0.0.1:8000</div>\n\n      <Map />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}